[{
  "title": "ES6重要内容",
  "author": "s",
  "content": "1.函数拓展(默认参数,展开运算符,不定参数,箭头函数) 2.promise 3.模板字符串 4.对象拓展5.Set 类型(集合) Map 类型 6.解构赋值 7.class 8.迭代器(Iterator)生成器(Generator) 9.let const\n10. 新增Array方法\n\n## 一. 函数拓展\n**1.块级函数**\n\n    块级作用域内声明的函数的处理规则\n    允许在块级作用域内声明函数。\n    函数声明类似于var，即会提升到全局作用域或函数作用域的头部。\n    同时，函数声明还会提升到所在的块级作用域的头部。\n\n\n注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作let处理。\n\n应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。\n\n**2.箭头函数**\n```javascript\n// 如果只有一个参数，圆括号可省略的\na.map( n => n * n )\n//如果返回一个对象要用()\nlet o = id => ({ id: id, name: 'temp'})\n//立即执行\nlet foo = (n => n * n)(3)\n```  \n\n## 二. promise\n\n在异步操作执行完后，用链式调用的方式执行回调函数\n\n```javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value)\n  } else {\n    reject(error)\n  }\n})\n\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done')\n  })\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n})\n```\n```javascript\nlet promise = readFile('example.txt')\npromise.then(function (contents) {\n    console.log(contents);\n})\npromise.then(null, function (err) {\n    console.log(err.message);\n})\npromise.catch(null, function (err) {\n    console.log(err.message);\n})\n```\n\nPromise状态 \n\n各个状态之间的转换\n有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）只有异步操作的结果，可以决定当前是哪一种状态\nPromise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected\n\n用promise判定多个相同请求的返回\n\n链式调用\n\n## 三. 模板字符串\n\n变量嵌入与多行字符串\n\n```javascript\nlet s = `\n  1\n  ${name}\n`\n```\n\n## 四. 对象拓展\n\n**1.简写，可计算属性名**\n\n```javascript\nvar s = ' name'\nfunction createPerson(name, age) {\n    return{\n        name, //name: name,\n        age,  //age: age,\n        ['first' + s]:'Nicho',\n        foo(){console.log(this.name)}//foo: function () {}\n    }\n}\n```\n\n**2.新增方法**\n\n```javascript\nObject.is(NAN, NAN) \nObject.assign(o, a.prototype) //复制 \nObject.setPrototypeOf(o, a)\n```\n\n**3.super**\n```javascript\nlet friend = {\n    name: 'nfriend',\n    foo() {\n        //return Object.getPrototypeOf(this).foo.call(this) + ',hi'\n        return super.foo() + ',hi'\n    }\n}\n```\n## 五.Set Map\n\nSet 中的元素都是不重复的,不对存储值进行类型转换\n\n```javascript\nvar s = new Set([0,2,3,4])\ns.add(1)//和 push 一样\ns.has(1) // true\ns.size  // 相当于 length\ns.delete(1)// delete 方法删除一个元素\ns.clear //移除所有元素\n\ns.forEach((value, value, set) => {})\narray = [...s]//array = [... new Set([1,2,3,3,4])]\n```\n\nWeakSet只存储对象的弱引用，不接受任何原始值\n\nMap不对键值进行类型转换 has(key) delete(key) clear() size\n```javascript\nvar m = new Map()\n// set 方法增加一 个值\nm.set('name', 'gua')\n// get 属性得到一个值\nm.get('name')\n\nm.forEach(function (value, key, ownerMap) {})\n```\n\n## 六.解构赋值\n\n**1. 数组解构**\n```javascript\nvar [a, b] = [1, 2]\n[a, b] = [b, a]\nlet [, , c] = [1, 2, 3]\nc === 3\nlet [a, ...b] = [1, 2, 3]\nb.length === 2\nlet [...a] = array 相当于 a = array.concat()\n```\n\n**2. 对象解构**\n```javascript\nlet node = {\n    type: 'Indentifier',\n    name: 'foo',\n    loc: {\n        start: {\n            line: 1,\n            column: 1\n        },\n        end: {\n            line: 1,\n            column: 4\n        }\n    },\n    range: [0, 3]\n}\nlet {type, name} = node\n({type, name, value = true} = node) 默认值\nlet {type: localType, name: localName} = node\nlog(localType) // 'Indentifier'\n\nlet{loc: { start }} = node\nlet{\n    log(start.line) //1\n    loc: { start: localStart },\n    range: [ startIndex ]\n} = node\nlog(localStart.line) //1\nlog(startIndex)//0\n```\n\n**3. 解构参数**\n```javascript\nfunction setCookie(name, value, {secure, path, domain, expires} = {}) {}\nvar setCookieDefaults = {\n    secure : false,\n    path : '/',\n    domain : 'example.com',\n    express : ''\n}\nfunction setCookie(name, value, {\n    secure = false,\n    path = '/',\n    domain = 'example.com',\n    express\n} = setCookieDefaults) {}\nsetCookie('type', 'js', {\n    secure: ture,\n    expires: 60000\n})\n\n\nfunction* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n```\n\n## 七.class \n\nclass 不会变量提升\n```javascript\nclass PersonClass {\n  constructor(name) {\n    this.name = name\n  }\n\n  sayName() {\n    console.log(this.name);\n  }\n\n  get html() {\n    return this.name\n  }\n\n  set html() {\n    this.name = value\n  }\n\n  static create(name) {\n    return new PersomClass(name)\n  }\n}\n\nlet person = new PersonClass('Nicholas')\n\nclass Rectangle {\n  constructor(length, width) {\n    this.length = length\n    this.width = width\n  }\n\n  getArea() {\n    return this.length * this.length\n  }\n}\n\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length)\n    //等于Rectangle.call(this, length, length)\n\n  }\n}\n\nvar square = new Square(3)\nconsole.log(square.getArea())\n```\n\n## 八.迭代器(Iterator),生成器(Generator)\n\n迭代器是一个特殊对象，有一个next()方法\n\n\n生成器是返回迭代器的函数\n\n```javascript\n// let createIterator = function *(items){}\nfunction *createIterator(items) {\n  for (var i = 0; i < items.length; i++) {\n    yield items[i]\n  }\n}\nlet interator = createIterator([1, 2, 3])\nconsole.log(interator.next()) // {value: 1, done: false}\n...\nconsole.log(interator.next()) // {value: undefined, done: true}\n\nlet o = {\n  *createIterator(items) {\n    for (var i = 0; i < items.length; i++) {\n      yield items[i]\n    }\n  }\n}\n```\n内建迭代器\n```javascript\nlet colors = ['red', 'green', 'blue']\nfor (let x of colors.entries()) {\n    console.log(x);\n}\nvar data = new Map()\nfor (let [key, value] of data {\n    console.log(key + '=' + value);\n}\n//[0, 'red']\nentries()\nvalue()\nkeys()\n```\n## 九.let 与 const\n\n块级作用域，不可重复声明,不存在变量提升\n\nfor/in for/of 可以用 let const\n\nconst Array与Object保存指针，内容可以修改\n```javascript\nconst arr = [1, 2]\narr.push(3)\n// [1, 2, 3]\n```\n\n## 新增Array方法\n\n**1.创建数组**\n\n```javascript\nArray.of()//元素\nArray.from(...a, value => value + 1)//可迭代对象,映射变换\n```\n\n**2.**\n```javascript\nlet numbers = [25, 30, 35, 40, 45]\nconsole.log(numbers.find(n => n > 33));//35\nconsole.log(numbers.findIndex(n => n > 33));//2\n```",
  "tag": "js",
  "created_time": 1569399071,
  "id": 1,
  "comments": []
}, {
  "title": "1",
  "author": "1",
  "content": "1",
  "tag": "js",
  "created_time": 1569412742,
  "id": 2,
  "comments": []
}]